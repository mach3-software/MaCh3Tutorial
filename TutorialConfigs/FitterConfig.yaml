General:
  OutputFile: "Test.root"
  TutorialSamples: ["TutorialConfigs/Samples/SampleHandler_Tutorial.yaml",
                    #"TutorialConfigs/Samples/SampleHandler_Tutorial_ATM.yaml"
                    ]
  FittingAlgorithm: "MCMC"

  RealData: false
  Asimov: true
  CustomReWeight: false
  FakeData: false
  ProcessMCMC: No
  Debug: No
  RandomStart: false
  Seed: 0
  MaCh3Modes: "TutorialConfigs/MaCh3Modes.yaml"
  Fitter:
    FitTestLikelihood: false
  Minuit2:
    NSteps: 100000
  PSO:
    Constriction: 1
    Inertia: 1.
    One: 1.
    Two: 1.
    Particles: 10
    Iterations: 10000
    Convergence: 1.
    TestLikelihoodDim: 9

  MCMC:
    NSteps: 10000
    #KS: Sets how frequent (number of steps) you want to autosave your chain, if you autosave rarely chain will be slightly faster, if you job wall is small you might want more frequent autosave to reduce number of lost steps
    #AutoSave: 500
    AutoSave: 10000
    UseReactorConstraint: No
    #Burn in for posterior predictive code
    BurnInSteps: 200000
  Systematics:
    XsecCovName: "xsec_cov"
    XsecFix: [ ]
    XsecCovFile: ["TutorialConfigs/CovObjs/SystematicModel.yaml",
                  #"TutorialConfigs/CovObjs/PCATest.yaml"
                  ]
    XsecPCAThreshold: -1
    XsecPCAParams: [-999, -999]
    XsecStepScale: 0.05

    OscCovName: "osc_cov"
    OscCovFile: ["TutorialConfigs/CovObjs/OscillationModel.yaml"]
    OscFix: ["baseline", "density", "Ye", "prod_height"]
    OscStepScale: 0.045

# Prior/Posterior predictive settings
Predictive:
  Ntoy: 10
  #Ntoy: 5000
  #Use Full LLH or only sample contribution based on discussion with Asher we almost always only want the sample likelihood
  FullLLH: false
  PosteriorFiles: "EMPTY"

# LLH Scan settings  
LLHScan:
  # don't make LLH for certain systematic groups
  #LLHScanSkipVector: []
  # Save individual sample contributions to the LLH
  LLHScanBySample: false
  # Number of points we run LLH scans for each systematic
  #LLHScanPoints: 50
  # Number of points for 2D scan in each direction
  #2DLLHScanPoints: 20
  # Add physical ranges for special params whose priors/errors may not be well well-defined
  ScanRanges:
    #delta_cp: [-3.14,3.14]

#KinemDistribution extra plots to draw
KinematicDistributionPlots:
- Name: "Particle Energy vs Particle Angle to Beam"
  VarStrings: ["ParticleBeamAngle", "ParticleEnergy"]
  VarBins: [[50,-3.1416, 3.1416], [50,0,4]]
- Name: "Particle Energy (muons only)"
  VarStrings: ["ParticleEnergy"]
  VarBins: [[50,0,4]]
  KinematicCuts:
  - VarString: "ParticlePDG"
    Range: [12.5, 13.5]
- Name: "Particle Energy (muons only, true Enu > 1GeV)"
  VarStrings: ["ParticleEnergy"]
  VarBins: [[50,0,4]]
  KinematicCuts:
  - VarString: "ParticlePDG"
    Range: [12.5, 13.5]
  - VarString: "TrueNeutrinoEnergy"
    Range: [1, 100]
- Name: "Particle Energy vs True Neutrino Energy (protons only)"
  VarStrings: ["TrueNeutrinoEnergy", "ParticleEnergy"]
  VarBins: [[50,0,4], [50,0,4]]
  KinematicCuts:
  - VarString: "ParticlePDG"
    Range: [2211.5,2212.5]
- Name: "Particle Energy vs True Neutrino Energy (protons only, true Enu > 1GeV)"
  VarStrings: ["TrueNeutrinoEnergy", "ParticleEnergy"]
  VarBins: [[50,0,4], [50,0,4]]
  KinematicCuts:
  - VarString: "ParticlePDG"
    Range: [2211.5,2212.5]
  - VarString: "TrueNeutrinoEnergy"
    Range: [1,100]
- Name: "True Neutrino Energy vs True Q2"
  VarStrings: ["TrueQ2", "TrueNeutrinoEnergy"]
  VarBins: [[50,0,3],[50,0,4]]
- Name: "True Neutrino Energy" 
  VarStrings: ["TrueNeutrinoEnergy"]
  VarBins: [[50,0,4]]
- Name: "True Neutrino Energy (0.4 to 2 GeV)"
  VarStrings: ["TrueNeutrinoEnergy"]
  VarBins: [[50,0,4]]
  KinematicCuts:
  - VarString: "TrueNeutrinoEnergy"
    Range: [0.4,2]
