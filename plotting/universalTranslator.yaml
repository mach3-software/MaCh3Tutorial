
## Specify what each fitter looks like so that the plotting code knows where to look for different outputs
FitterSpec:

    ## first we declare what fitters the plotting code should be aware of
    fitters: ["FITTER_1"]

    ## now for each one specified we give some details
    FITTER_1:

        ###################################################################
        ##### First we specify where to look for log likelihood scans #####
        ###################################################################

        ## Specify what type of objects are used to save the LLH scans
        ## EM: could maybe just get this from the root file
        ##     on the other hand, might be useful if one day we move away from root, 
        ##     then could specify different file types and just specify how to read them in the input manager
        LLHObjectType: "TH1D"

        ## tell the code where to find likelihood scans for sample, penalty and total likelihood
        sample_LLH:
            ## we define a string that tells the code what path to look in to find likelihood scans
            ## the token {PARAMETER} will be expanded to the fitter specific parameter name of a parameter
            ## when the code is looking for scans for that parameter.
            ## for example if there were parameters {p1, p2, p3} which in FITTER_1 are called {param1, param2, param3}
            ## then the path specified below would tell the code to look for objects in the root file called:
            ## - likelihood_scans/Sample_LLH/param1_sam
            ## - likelihood_scans/Sample_LLH/param2_sam
            ## - likelihood_scans/Sample_LLH/param3_sam
            location: ["Sample_LLH/{PARAMETER}_sam"]
            
        penalty_LLH:
            ## Additionally we can split the string two pars by using the ':' token
            ## The first part should be a path to the directory within the root file
            ## in this case that path is 'likelihood_scans/Sample_LLH'
            ## The second part is a string to be matched to the end of the objects in that directory
            ## this can be useful if there are a nuber of prefixes attached to the start of different parameters
            ## e.g. re-using our example above, if the root file contained objects called
            ## - likelihood_scans/Penalty_LLH/BLAAA_param1_pen
            ## - likelihood_scans/Penalty_LLH/BLEEE_param2_pen
            ## - likelihood_scans/Penalty_LLH/BLOOO_param3_pen
            ## then the following path would correctly find the scans
            location: 
            [
                "xsec_LLH:{PARAMETER}_xsec",
            ]
            
        total_LLH:
            ## Fitters may split parameters across multiple different directories
            ## 
            ## e.g 
            ## - likelihood_scans/TOTAL_LLH_DIR1/BLAAA_param1_pen
            ## - likelihood_scans/TOTAL_LLH_DIR2/BLEEE_param2_pen
            ## - likelihood_scans/TOTAL_LLH_DIR3/BLOOO_param3_pen
            ## 
            ## to deal with this we can specify multiple locations to look for LLH scans as below
            ## the code will search all of them for each parameter and will shout if it finds more than 1 matching pattern
            location: [
                "Total_LLH:{PARAMETER}_full",
                "Total_LLH_DIR_2:{PARAMETER}_full",
                ]

        ## We also like to be able to beak our likelihood down by sample
        ## here we tell the code where to find the per-sample likelihood scans
        bySample_LLH:
            ## we specify the locations in the same way as above, the only difference is that now there is an additional
            ## token, {SAMPLE}, which will be expanded to the fitter specific sample name when the code 
            ## is looking for LLH scans for a particular sample
            location: 
            [
                "NOT CURRENTLY IMPLEMENTED IN TUTORIAL!!",
            ]



        ######################################################################
        ##### Now we specify where to look for processed post-fit errors #####
        ######################################################################

        ## We often have multiple different types of errors that we would like to be able to plot
        ## here we specify all the ones that the fitter might have
        AvailablePostFitErrorTypes: ["Gauss", "HPD", "Prior"]

        ## We also specify one to use as a default, that will be assumed within the plotting code
        ## if one is not specified
        defaultPostFitErrorType: "HPD"

        ## Now we tell the code where to find the values for each of the error types
        ## **** WARNING *** currently it is assumed that the values and errors are stored in a TH1D 
        ##    with the bin labels specifying the name of the parameter. This will likely not be the 
        ##    case for every fitter encountered. Should probably add the possibility of specifying 
        ###   other formats.
        postFitErrorTypes:
            Gauss:
                ## EM: specify possible locations and then scan through all of them when reading the input
                ##     code will look through the TH1D at each location and check it for the parameter it is looking for
                location: 
                [
                    "param_spline_gaus", 
                    "param_flux_gaus"
                ] 
                
            HPD:
                location: 
                [
                    "param_spline_HPD", 
                    "param_flux_HPD"
                ]
            
            Prior:
                location: 
                [
                    "param_spline_prefit", 
                    "param_flux_prefit"
                ]

        1dPosteriors:
            location: [
                "Post_1d_hists:{PARAMETER}",
            ]

        MCMCsteps:
            location: [
                "posteriors",
            ]

## Now we define what samples are available for this particular experiment
Samples:

    ## Here we define the master list of all the available samples
    Samples: 
    [
        "SAMPLE_1",
        "SAMPLE_2",
        "SAMPLE_3",
    ]

    SAMPLE_1: 
        FITTER_1:

        ## We can specify "tags" to apply to a sample
        ## This allows you to later on in your plotting scripts get, for example, all the samples which, for example,
        ## are related to some particular sub-detector by adding a tag for that detector
        ## Or to samples which correspond to a particular tagged particle
        tags: ["subDet1", "particleTag"]
            
    SAMPLE_2: 
        FITTER_1:
        
    SAMPLE_3: 
        Fitter_1:
    

## Now we define the parameters that are modelled in the experiment
Parameters:

    ## First set out the master list of parameters
    Parameters: 
    [  
        "Norm_Param_0",
        "Norm_Param_1",
        "Norm_Param_2",

        "Spline_Param_0",
        "Spline_Param_1",
        
        "Func_Param_0",
        "Func_Param_1",
        "Func_Param_2",
        "Func_Param_3",

        "sin2th_12",
        "sin2th_23",
        "sin2th_13",
        "delm2_12",
        "delm2_23",
        "delta_cp",

        "baseline",
        "density"
    ]

    ## Now we tell the input manager how it should translate the parameter names to each of the fitters
    ## Let's assume again that FITTER_1 uses the same parameter names defined above and so needs no
    ## further specification, but that the names in FITTER_2 follow a different pattern, and also use 
    ## different names for the XSEC parameters when dealing with LLH scans and post fit errors
    
    Norm_Param_0:
        ## We can also specify "tags" to apply to a parameter
        ## This allows you to later on in your plotting scripts get, for example, all parameters which have the tag "pion"
        ## and plot them together, or all parameters with both the tags "pion" and "FSI"
        ## Let's pretend that this is a xsec parameter relating to pion FSI
        tags: ["norm", "xsec", "FSI", "pion"]

    Norm_Param_1:
        ## lets pretend this one is a detector systematic parameter
        tags: ["systematic", "norm", "det-syst"]

    Norm_Param_2:
        ## lets pretend this one is a flux parameter
        tags: ["systematic", "norm", "flux"]

    Spline_Param_0:
        tags: ["systematic", "spline", "xsec"]

    Spline_Param_1:
        tags: ["systematic", "spline", "det-syst"]
    
    Func_Param_0:
        tags: ["systematic", "func", "xsec"]

    Func_Param_1:
        tags: ["systematic", "func", "xsec"]

    Func_Param_2:
        tags: ["systematic", "func", "detsyst"]

    Func_Param_3:
        tags: ["systematic", "func", "detsyst"]
    
    sin2th_12:
        tags: ["oscillation", "angle"]

    sin2th_23:
        tags: ["oscillation", "angle"]

    sin2th_13:
        tags: ["oscillation", "angle"]

    delm2_12:
        tags: ["oscillation", "mass-diff"]

    delm2_23:
        tags: ["oscillation", "mass-diff"]

    delta_cp:
        tags: ["oscillation"]

    baseline:
        tags: ["oscillation", "experiment"]

    density:
        tags: ["oscillation", "experiment"]
