
## Specify what each fitter looks like so that the plotting code knows where to look for different outputs
FitterSpec:

    ## first we declare what fitters the plotting code should be aware of
    fitters: ["FITTER_1", "FITTER_2"]

    ## now for each one specified we give some details
    FITTER_1:

        ###################################################################
        ##### First we specify where to look for log likelihood scans #####
        ###################################################################

        ## Specify what type of objects are used to save the LLH scans
        ## EM: could maybe just get this from the root file
        ##     on the other hand, might be useful if one day we move away from root, 
        ##     then could specify different file types and just specify how to read them in the input manager
        LLHObjectType: "TH1D"

        ## tell the code where to find likelihood scans for sample, penalty and total likelihood
        sample_LLH:
            ## we define a string that tells the code what path to look in to find likelihood scans
            ## the token {PARAMETER} will be expanded to the fitter specific parameter name of a parameter
            ## when the code is looking for scans for that parameter.
            ## for example if there were parameters {p1, p2, p3} which in FITTER_1 are called {param1, param2, param3}
            ## then the path specified below would tell the code to look for objects in the root file called:
            ## - likelihood_scans/Sample_LLH/param1_sam
            ## - likelihood_scans/Sample_LLH/param2_sam
            ## - likelihood_scans/Sample_LLH/param3_sam
            location: ["likelihood_scans/Sample_LLH/{PARAMETER}_sam"]
            
        penalty_LLH:
            ## Additionally we can split the string two pars by using the ':' token
            ## The first part should be a path to the directory within the root file
            ## in this case that path is 'likelihood_scans/Sample_LLH'
            ## The second part is a string to be matched to the end of the objects in that directory
            ## this can be useful if there are a nuber of prefixes attached to the start of different parameters
            ## e.g. re-using our example above, if the root file contained objects called
            ## - likelihood_scans/Penalty_LLH/BLAAA_param1_pen
            ## - likelihood_scans/Penalty_LLH/BLEEE_param2_pen
            ## - likelihood_scans/Penalty_LLH/BLOOO_param3_pen
            ## then the following path would correctly find the scans
            location: 
            [
                "likelihood_scans/Penalty_LLH:{PARAMETER}_pen",
            ]
            
        total_LLH:
            ## Fitters may split parameters across multiple different directories
            ## 
            ## e.g 
            ## - likelihood_scans/TOTAL_LLH_DIR1/BLAAA_param1_pen
            ## - likelihood_scans/TOTAL_LLH_DIR2/BLEEE_param2_pen
            ## - likelihood_scans/TOTAL_LLH_DIR3/BLOOO_param3_pen
            ## 
            ## to deal with this we can specify multiple locations to look for LLH scans as below
            ## the code will search all of them for each parameter and will shout if it finds more than 1 matching pattern
            location: [
                "likelihood_scans/Total_LLH_DIR_1:{PARAMETER}_tot",
                "likelihood_scans/Total_LLH_DIR_2:{PARAMETER}_tot",
                ]

        ## We also like to be able to beak our likelihood down by sample
        ## here we tell the code where to find the per-sample likelihood scans
        bySample_LLH:
            ## we specify the locations in the same way as above, the only difference is that now there is an additional
            ## token, {SAMPLE}, which will be expanded to the fitter specific sample name when the code 
            ## is looking for LLH scans for a particular sample
            location: 
            [
                "{SAMPLE}_LLH:{PARAMETER}{SAMPLE}",
            ]



        ######################################################################
        ##### Now we specify where to look for processed post-fit errors #####
        ######################################################################

        ## We often have multiple different types of errors that we would like to be able to plot
        ## here we specify all the ones that the fitter might have
        AvailablePostFitErrorTypes: ["Gauss", "HPD", "Prior"]

        ## We also specify one to use as a default, that will be assumed within the plotting code
        ## if one is not specified
        defaultPostFitErrorType: "HPD"

        ## Now we tell the code where to find the values for each of the error types
        ## **** WARNING *** currently it is assumed that the values and errors are stored in a TH1D 
        ##    with the bin labels specifying the name of the parameter. This will likely not be the 
        ##    case for every fitter encountered. Should probably add the possibility of specifying 
        ###   other formats.
        postFitErrorTypes:
            Gauss:
                ## EM: specify possible locations and then scan through all of them when reading the input
                ##     code will look through the TH1D at each location and check it for the parameter it is looking for
                location: 
                [
                    "param_spline_gaus", 
                    "param_flux_gaus"
                ] 
                
            HPD:
                location: 
                [
                    "param_spline_HPD", 
                    "param_flux_HPD"
                ]
            
            Prior:
                location: 
                [
                    "param_spline_prefit", 
                    "param_flux_prefit"
                ]




    FITTER_2:

        ## This fitter uses tgraphs to store its llh scans instead of TH1Ds
        LLHObjectType: "TGraph"
        
        sample_LLH:
            location: 
            [
                "preFit/scan/llhSamp:_{PARAMETER}_TGraph",
            ]
            
        penalty_LLH:
            location: 
            [
                "preFit/scan/llhPenalty:_{PARAMETER}_TGraph",
            ]
            
        total_LLH:
            location: 
            [
                "preFit/scan/llh:_{PARAMETER}_TGraph",
            ]

        bySample_LLH:
            location: 
            [
                "preFit/scan/llhStat/{SAMPLE}:_{PARAMETER}_TGraph",
            ]

        
        ## This fitter uses Minuit to find best fit points and stores the prior error and 
        ## the best fit points and errors found by the Migrad algorithm 
        defaultPostFitErrorType: "Migrad"
        AvailablePostFitErrorTypes: ["Migrad", "Prior"]

        ## This fitter stores parameters in different directories depending on their type
        ## so we need to specify all the possible location
        postFitErrorTypes:
            
            Migrad:
                location: 
                [
                    "errors/Cross-Section Systematics Group 1/values/postFitErrors",
                    "errors/Cross-Section Systematics Group 2/values/postFitErrors",
                    "errors/Detector Systematics/values/postFitErrors",
                    "errors/Flux Systematics/values/postFitErrors",
                ]
            
            Prior:
                location: 
                [
                    "errors/Cross-Section Systematics Group 1/values/preFitErrors",
                    "errors/Cross-Section Systematics Group 2/values/preFitErrors",
                    "errors/Detector Systematics/values/preFitErrors",
                    "errors/Flux Systematics/values/preFitErrors",
                ]
                
## Now we define what samples are available for this particular experiment
Samples:

    ## Here we define the master list of all the available samples
    Samples: 
    [
        "SAMPLE_1",
        "SAMPLE_2",
        "SAMPLE_3",
    ]

    ## now we can specify particular overrides for each parameter for different fitters
    ## For example, lets assume that FITTER_1 uses the same names that are laid out in the list above
    ## but FITTER_2 uses a slightly different naming convention
    SAMPLE_1: 
        FITTER_1:

        FITTER_2:
            ## this is the name of the sample when dealing with LLH scans
            ## currently this is the only one that matters, however in future it might be useful
            ## to also be able to specify this for different file types, hence why LLH is specified
            ## and not just something general
            LLH: "Sample-1"

        ## We can specify "tags" to apply to a sample
        ## This allows you to later on in your plotting scripts get, for example, all the samples which, for example,
        ## are related to some particular sub-detector by adding a tag for that detector
        ## Or to samples which correspond to a particular tagged particle
        tags: ["subDet1", "particleTag"]
            

    SAMPLE_2: 
        FITTER_1:

        FITTER_2:
            LLH: "Sample-2"

        
    SAMPLE_3: 
        Fitter_1:

        FITTER_2:
            LLH: "Sample-3"
    

## Now we define the parameters that are modelled in the experiment
Parameters:

    ## First set out the master list of parameters
    Parameters: 
    [  
        "XSEC_PAR_1",
        "XSEC_PAR_2",
        "XSEC_PAR_3",
        "XSEC_PAR_4",
        "XSEC_PAR_5",

        "DETSYST_PAR_1",
        "DETSYST_PAR_2",
        "DETSYST_PAR_3",
        
        "FLUX_PAR_1",
        "FLUX_PAR_2",
        "FLUX_PAR_3",

        "OSC_PAR_1",
        "OSC_PAR_2",
        "OSC_PAR_3",
    ]

    ## Now we tell the input manager how it should translate the parameter names to each of the fitters
    ## Let's assume again that FITTER_1 uses the same parameter names defined above and so needs no
    ## further specification, but that the names in FITTER_2 follow a different pattern, and also use 
    ## different names for the XSEC parameters when dealing with LLH scans and post fit errors
    
    XSEC_PAR_1:
        FITTER_2:
            ## EM: *** TODO *** Might be good to use arrays to specify multiple possible names
            ##     similarly to how we can specify different locations for LLH scans and post-fit errors
            ##     this could be useful e.g. if a parameter had different names in different years in a fitter?? 
            LLH: "XSEC-PARAMETER-1" 
            PostFit: "PARAMETER-1"

        ## We can also specify "tags" to apply to a parameter
        ## This allows you to later on in your plotting scripts get, for example, all parameters which have the tag "pion"
        ## and plot them together, or all parameters with both the tags "pion" and "FSI"
        tags: ["xsec", "FSI", "pion"]

    XSEC_PAR_2:
        FITTER_2:
            LLH: "XSEC-PARAMETER-2"
            PostFit: "PARAMETER-2"

    XSEC_PAR_3:
        FITTER_2:
            LLH: "XSEC-PARAMETER-3"
            PostFit: "PARAMETER-3"
            
    XSEC_PAR_4:
        FITTER_2:
            LLH: "XSEC-PARAMETER-4"
            PostFit: "PARAMETER-4"
            
            ## We can also provide a post fit error location for this parameter which will 
            ## override the more general locations specified earlier for this fitter. 
            ## This can be useful if e.g. the parameter appears in more than one of the possible post fit error
            ## TH1Ds. The code doesn't like this and so the override will break the degeneracy.
            postFitLoc: ["errors/Cross-Section Systematics Group 2/values/postFitErrors"]

            ## *** TODO *** I'm not super happy with the current way of specifying the override
            ##     I think it could be made a lot more general and easily extendable to other file types
            ##     e.g. by specifying it like 
            ##     locationOverrides:
            ##       LLH: 
            ##         <LLHtype1>: "LLHtype1Location"
            ##         <LLHtype2>: "LLHtype2Location"
            ##         <LLHtype3>: "LLHtype3Location"
            ##         ...
            ##       postFit:
            ##         <postFitType1>: "postFitType1Location"
            ##         <postFitType2>: "postFitType2Location"
            ##         <postFitType3>: "postFitType3Location"
            ##         ...
            ##      <other file type>:
            ##         ...
            ##      ...
            
    XSEC_PAR_5:
        FITTER_2:
            LLH: "XSEC-PARAMETER-5"
            PostFit: "PARAMETER-5"
            postFitLoc: ["errors/Cross-Section Systematics Group 2/values/preFitErrors"]



    DETSYST_PAR_1:
        FITTER_2:
            LLH: "DETSYST-PARAMETER-1"
            PostFit: "DETSYST-PARAMETER-1"
    DETSYST_PAR_2:
        FITTER_2:
            LLH: "DETSYST-PARAMETER-2"
            PostFit: "DETSYST-PARAMETER-2"
    DETSYST_PAR_3:
        FITTER_2:
            LLH: "DETSYST-PARAMETER-3"
            PostFit: "DETSYST-PARAMETER-3"
    
    FLUX_PAR_1:
        FITTER_2:
            LLH: "FLUX-PARAMETER-1"
            PostFit: "FLUX-PARAMETER-1"
    FLUX_PAR_2:
        FITTER_2:
            LLH: "FLUX-PARAMETER-2"
            PostFit: "FLUX-PARAMETER-2"
    FLUX_PAR_3:
        FITTER_2:
            LLH: "FLUX-PARAMETER-3"
            PostFit: "FLUX-PARAMETER-3"

    OSC_PAR_1:
        FITTER_2:
            LLH: "OSC-PARAMETER-1"
            PostFit: "OSC-PARAMETER-1"
    OSC_PAR_2:
        FITTER_2:
            LLH: "OSC-PARAMETER-2"
            PostFit: "OSC-PARAMETER-2"
    OSC_PAR_3:
        FITTER_2:
            LLH: "OSC-PARAMETER-3"
            PostFit: "OSC-PARAMETER-3"
    
